import json
import traceback

from server.entities.plugin_manager import PluginManager
from server.entities.resource_types import ResourceType
from server.entities.resource_manager import ResourceManager
from server.entities.plugin_result_types import PluginResultStatus

from tasks.tasks import celery_app
import json
import requests


# Which resources are this plugin able to work with
RESOURCE_TARGET = [ResourceType.HASH]

# Plugin Metadata {a description, if target is actively reached and name}
PLUGIN_AUTOSTART = False
PLUGIN_DESCRIPTION = "Query information by hash on Malware Bazaar"
PLUGIN_DISABLE = False
PLUGIN_IS_ACTIVE = False
PLUGIN_NAME = "malwarebazaar"
PLUGIN_NEEDS_API_KEY = False

API_KEY = False
API_KEY_IN_DDBB = False
API_KEY_DOC = ""
API_KEY_NAMES = []


class Plugin:
    def __init__(self, resource, project_id):
        self.project_id = project_id
        self.resource = resource

    def do(self):
        resource_type = self.resource.get_type()
        target = self.resource.get_data()["canonical_name"]

        if resource_type == ResourceType.HASH:
            target = self.resource.get_data()["hash"]

        try:
            to_task = {
                "target": target,
                "resource_id": self.resource.get_id_as_string(),
                "project_id": self.project_id,
                "resource_type": resource_type.value,
                "plugin_name": PLUGIN_NAME,
            }
            malwarebazaar_task.delay(**to_task)

        except Exception as e:
            tb1 = traceback.TracebackException.from_exception(e)
            print("".join(tb1.format()))


@celery_app.task
def malwarebazaar_task(plugin_name, project_id, resource_id, resource_type, target):

    resource_type_bazaar = ResourceType(resource_type)

    data = {"query": "get_info", "hash": target}

    try:
        query_result = {}
        result_status = PluginResultStatus.STARTED

        if resource_type_bazaar == ResourceType.HASH:

            response = requests.post(
                "https://mb-api.abuse.ch/api/v1/", data=data, timeout=15
            )
            query_result = json.loads(response.content.decode("utf-8", "ignore"))
            if query_result.get("query_status") == "hash_not_found":
                result_status = PluginResultStatus.RETURN_NONE
            else:
                result_status = PluginResultStatus.COMPLETED

        else:
            result_status = PluginResultStatus.RETURN_NONE
            print("[malwarebazaar] resource not supported")

        PluginManager.set_plugin_results(
            resource_id, plugin_name, project_id, query_result, result_status
        )

    except Exception as e:
        tb1 = traceback.TracebackException.from_exception(e)
        print("".join(tb1.format()))
